//file:noinspection GroovyAssignabilityCheck, GrUnresolvedAccess, GrDeprecatedAPIUsage

plugins {
    id "fabric-loom" version "1.4-SNAPSHOT"
    id "org.jetbrains.kotlin.jvm" version "1.9.+"
    id "maven-publish"
}

version = mod_version
group = maven_group

base {
    archivesName = archives_base_name
}

repositories {
    maven {
        name = "Terraformers"
        url  = "https://maven.terraformersmc.com/releases/"
    }

    maven {
        name = "Jitpack"
        url  = "https://jitpack.io/"
    }

    maven {
        name = "Geckolib"
        url  = "https://dl.cloudsmith.io/public/geckolib3/geckolib/maven/"
    }

    maven {
        name = "Modrinth"
        url  = "https://api.modrinth.com/maven/"
    }

    maven {
        name = "Modrinth"
        url  = "https://api.modrinth.com/maven"
    }

    maven {
        name = "Debug Utils (GitLab)"
        url  = "https://gitlab.com/api/v4/projects/21830712/packages/maven"
    }
}

dependencies {
    minecraft "com.mojang:minecraft:$minecraft_version"
    mappings "net.fabricmc:yarn:$minecraft_version+build.$yarn_build:v2"
    modImplementation "net.fabricmc:fabric-loader:$loader_version"

    modImplementation "net.fabricmc.fabric-api:fabric-api:$fabric_version"
    modImplementation "net.fabricmc:fabric-language-kotlin:$fabric_kotlin_version"

    annotationProcessor include (implementation("com.github.LlamaLad7:MixinExtras:$mixin_extras_version"))

    modImplementation "software.bernie.geckolib:geckolib-fabric-$geckolib_version"
    modImplementation "com.terraformersmc:modmenu:$mod_menu_version"

    // modRuntimeOnly "io.github.flemmli97:debugutils:$debug_utils_version-fabric"
    modRuntimeOnly "maven.modrinth:carpet:$carpet_version"
}

loom {
    splitEnvironmentSourceSets()

    accessWidenerPath = file("src/main/resources/${mod_id}.accesswidener")

    mods {
        mod_id {
            sourceSet sourceSets.main
            sourceSet sourceSets.client
        }
    }

    runs {
        datagen {
            inherit server
            name "Data Generation"
            vmArg "-Dfabric-api.datagen"
            vmArg "-Dfabric-api.datagen.output-dir=${file("src/generated/resources")}"
            vmArg "-Dfabric-api.datagen.modid=$mod_id"

            runDir "build/datagen"
        }
    }
}

// Add the generated resources to the main source set
sourceSets {
    main {
        resources {
            srcDirs += [
                    "src/generated/resources"
            ]
        }
    }
}

processResources {
    inputs.property "version", version

    filesMatching("fabric.mod.json") {
        expand "version": version
    }
}

java {
    withSourcesJar()
    sourceCompatibility = targetCompatibility = JavaVersion.VERSION_17
}

compileKotlin {
    kotlinOptions {
        jvmTarget = '17'
    }
}

jar {
    from("LICENSE", "LICENSE_ASSETS")
}
